// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package main

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBus = `-- name: CreateBus :one
INSERT INTO buses (bus_number)
VALUES ($1)
ON CONFLICT (bus_number) DO UPDATE SET bus_number = EXCLUDED.bus_number
RETURNING id
`

func (q *Queries) CreateBus(ctx context.Context, busNumber pgtype.Text) (int32, error) {
	row := q.db.QueryRow(ctx, createBus, busNumber)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createRoute = `-- name: CreateRoute :one
INSERT INTO bus_routes (route_code)
VALUES ($1)
ON CONFLICT (route_code) DO UPDATE SET route_code = EXCLUDED.route_code
RETURNING id
`

func (q *Queries) CreateRoute(ctx context.Context, routeCode pgtype.Text) (int32, error) {
	row := q.db.QueryRow(ctx, createRoute, routeCode)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  name,
  bus_id,
  route_id,
  start_time,
  end_time,
  driven_distance_km,
  energy_consumption_kWh,
  itcs_passengers_mean,
  itcs_passengers_min,
  itcs_passengers_max,
  grid_available_mean,
  temperature_mean,
  temperature_min,
  temperature_max
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14
)
RETURNING id
`

type CreateTripParams struct {
	Name                 string
	BusID                pgtype.Int4
	RouteID              pgtype.Int4
	StartTime            pgtype.Timestamp
	EndTime              pgtype.Timestamp
	DrivenDistanceKm     pgtype.Numeric
	EnergyConsumptionKWh pgtype.Numeric
	ItcsPassengersMean   pgtype.Numeric
	ItcsPassengersMin    pgtype.Int4
	ItcsPassengersMax    pgtype.Int4
	GridAvailableMean    pgtype.Numeric
	TemperatureMean      pgtype.Numeric
	TemperatureMin       pgtype.Numeric
	TemperatureMax       pgtype.Numeric
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTrip,
		arg.Name,
		arg.BusID,
		arg.RouteID,
		arg.StartTime,
		arg.EndTime,
		arg.DrivenDistanceKm,
		arg.EnergyConsumptionKWh,
		arg.ItcsPassengersMean,
		arg.ItcsPassengersMin,
		arg.ItcsPassengersMax,
		arg.GridAvailableMean,
		arg.TemperatureMean,
		arg.TemperatureMin,
		arg.TemperatureMax,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteTelemetryByTrip = `-- name: DeleteTelemetryByTrip :exec
DELETE FROM telemetry
WHERE trip_id = $1
`

func (q *Queries) DeleteTelemetryByTrip(ctx context.Context, tripID int32) error {
	_, err := q.db.Exec(ctx, deleteTelemetryByTrip, tripID)
	return err
}

const deleteTripByName = `-- name: DeleteTripByName :exec
DELETE FROM trips
WHERE name = $1
`

func (q *Queries) DeleteTripByName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteTripByName, name)
	return err
}

const getTelemetryByTrip = `-- name: GetTelemetryByTrip :many
SELECT id, trip_id, time, electric_power_demand, temperature_ambient, traction_brake_pressure, traction_traction_force, gnss_altitude, gnss_course, gnss_latitude, gnss_longitude, itcs_bus_route, itcs_number_of_passengers, itcs_stop_name, odometry_articulation_angle, odometry_steering_angle, odometry_vehicle_speed, odometry_wheel_speed_fl, odometry_wheel_speed_fr, odometry_wheel_speed_ml, odometry_wheel_speed_mr, odometry_wheel_speed_rl, odometry_wheel_speed_rr, status_door_is_open, status_grid_is_available, status_halt_brake_is_active, status_park_brake_is_active FROM telemetry
WHERE trip_id = $1
ORDER BY time
`

func (q *Queries) GetTelemetryByTrip(ctx context.Context, tripID int32) ([]Telemetry, error) {
	rows, err := q.db.Query(ctx, getTelemetryByTrip, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Telemetry
	for rows.Next() {
		var i Telemetry
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Time,
			&i.ElectricPowerDemand,
			&i.TemperatureAmbient,
			&i.TractionBrakePressure,
			&i.TractionTractionForce,
			&i.GnssAltitude,
			&i.GnssCourse,
			&i.GnssLatitude,
			&i.GnssLongitude,
			&i.ItcsBusRoute,
			&i.ItcsNumberOfPassengers,
			&i.ItcsStopName,
			&i.OdometryArticulationAngle,
			&i.OdometrySteeringAngle,
			&i.OdometryVehicleSpeed,
			&i.OdometryWheelSpeedFl,
			&i.OdometryWheelSpeedFr,
			&i.OdometryWheelSpeedMl,
			&i.OdometryWheelSpeedMr,
			&i.OdometryWheelSpeedRl,
			&i.OdometryWheelSpeedRr,
			&i.StatusDoorIsOpen,
			&i.StatusGridIsAvailable,
			&i.StatusHaltBrakeIsActive,
			&i.StatusParkBrakeIsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripByName = `-- name: GetTripByName :one
SELECT id, name, bus_id, route_id, start_time, end_time, driven_distance_km, energy_consumption_kwh, itcs_passengers_mean, itcs_passengers_min, itcs_passengers_max, grid_available_mean, temperature_mean, temperature_min, temperature_max FROM trips
WHERE name = $1
`

func (q *Queries) GetTripByName(ctx context.Context, name string) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripByName, name)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BusID,
		&i.RouteID,
		&i.StartTime,
		&i.EndTime,
		&i.DrivenDistanceKm,
		&i.EnergyConsumptionKwh,
		&i.ItcsPassengersMean,
		&i.ItcsPassengersMin,
		&i.ItcsPassengersMax,
		&i.GridAvailableMean,
		&i.TemperatureMean,
		&i.TemperatureMin,
		&i.TemperatureMax,
	)
	return i, err
}

const getTripsByBus = `-- name: GetTripsByBus :many
SELECT id, name, bus_id, route_id, start_time, end_time, driven_distance_km, energy_consumption_kwh, itcs_passengers_mean, itcs_passengers_min, itcs_passengers_max, grid_available_mean, temperature_mean, temperature_min, temperature_max FROM trips
WHERE bus_id = $1
ORDER BY start_time
`

func (q *Queries) GetTripsByBus(ctx context.Context, busID pgtype.Int4) ([]Trip, error) {
	rows, err := q.db.Query(ctx, getTripsByBus, busID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BusID,
			&i.RouteID,
			&i.StartTime,
			&i.EndTime,
			&i.DrivenDistanceKm,
			&i.EnergyConsumptionKwh,
			&i.ItcsPassengersMean,
			&i.ItcsPassengersMin,
			&i.ItcsPassengersMax,
			&i.GridAvailableMean,
			&i.TemperatureMean,
			&i.TemperatureMin,
			&i.TemperatureMax,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripsByRoute = `-- name: GetTripsByRoute :many
SELECT id, name, bus_id, route_id, start_time, end_time, driven_distance_km, energy_consumption_kwh, itcs_passengers_mean, itcs_passengers_min, itcs_passengers_max, grid_available_mean, temperature_mean, temperature_min, temperature_max FROM trips
WHERE route_id = $1
ORDER BY start_time
`

func (q *Queries) GetTripsByRoute(ctx context.Context, routeID pgtype.Int4) ([]Trip, error) {
	rows, err := q.db.Query(ctx, getTripsByRoute, routeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BusID,
			&i.RouteID,
			&i.StartTime,
			&i.EndTime,
			&i.DrivenDistanceKm,
			&i.EnergyConsumptionKwh,
			&i.ItcsPassengersMean,
			&i.ItcsPassengersMin,
			&i.ItcsPassengersMax,
			&i.GridAvailableMean,
			&i.TemperatureMean,
			&i.TemperatureMin,
			&i.TemperatureMax,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripsByTimeRange = `-- name: GetTripsByTimeRange :many
SELECT id, name, bus_id, route_id, start_time, end_time, driven_distance_km, energy_consumption_kwh, itcs_passengers_mean, itcs_passengers_min, itcs_passengers_max, grid_available_mean, temperature_mean, temperature_min, temperature_max FROM trips
WHERE start_time >= $1
  AND end_time <= $2
ORDER BY start_time
`

type GetTripsByTimeRangeParams struct {
	StartTimeFrom pgtype.Timestamp
	EndTimeTo     pgtype.Timestamp
}

func (q *Queries) GetTripsByTimeRange(ctx context.Context, arg GetTripsByTimeRangeParams) ([]Trip, error) {
	rows, err := q.db.Query(ctx, getTripsByTimeRange, arg.StartTimeFrom, arg.EndTimeTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BusID,
			&i.RouteID,
			&i.StartTime,
			&i.EndTime,
			&i.DrivenDistanceKm,
			&i.EnergyConsumptionKwh,
			&i.ItcsPassengersMean,
			&i.ItcsPassengersMin,
			&i.ItcsPassengersMax,
			&i.GridAvailableMean,
			&i.TemperatureMean,
			&i.TemperatureMin,
			&i.TemperatureMax,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTelemetry = `-- name: InsertTelemetry :exec
INSERT INTO telemetry (
  trip_id,
  time,
  electric_power_demand,
  gnss_altitude,
  gnss_course,
  gnss_latitude,
  gnss_longitude,
  itcs_bus_route,
  itcs_number_of_passengers,
  itcs_stop_name,
  odometry_articulation_angle,
  odometry_steering_angle,
  odometry_vehicle_speed,
  odometry_wheel_speed_fl,
  odometry_wheel_speed_fr,
  odometry_wheel_speed_ml,
  odometry_wheel_speed_mr,
  odometry_wheel_speed_rl,
  odometry_wheel_speed_rr,
  status_door_is_open,
  status_grid_is_available,
  status_halt_brake_is_active,
  status_park_brake_is_active,
  temperature_ambient,
  traction_brake_pressure,
  traction_traction_force
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $16,
  $17,
  $18,
  $19,
  $20,
  $21,
  $22,
  $23,
  $24,
  $25,
  $26
)
`

type InsertTelemetryParams struct {
	TripID                    int32
	Time                      pgtype.Timestamp
	ElectricPowerDemand       pgtype.Numeric
	GnssAltitude              pgtype.Numeric
	GnssCourse                pgtype.Numeric
	GnssLatitude              pgtype.Numeric
	GnssLongitude             pgtype.Numeric
	ItcsBusRoute              pgtype.Text
	ItcsNumberOfPassengers    pgtype.Numeric
	ItcsStopName              pgtype.Text
	OdometryArticulationAngle pgtype.Numeric
	OdometrySteeringAngle     pgtype.Numeric
	OdometryVehicleSpeed      pgtype.Numeric
	OdometryWheelSpeedFl      pgtype.Numeric
	OdometryWheelSpeedFr      pgtype.Numeric
	OdometryWheelSpeedMl      pgtype.Numeric
	OdometryWheelSpeedMr      pgtype.Numeric
	OdometryWheelSpeedRl      pgtype.Numeric
	OdometryWheelSpeedRr      pgtype.Numeric
	StatusDoorIsOpen          pgtype.Bool
	StatusGridIsAvailable     pgtype.Bool
	StatusHaltBrakeIsActive   pgtype.Bool
	StatusParkBrakeIsActive   pgtype.Bool
	TemperatureAmbient        pgtype.Numeric
	TractionBrakePressure     pgtype.Numeric
	TractionTractionForce     pgtype.Numeric
}

func (q *Queries) InsertTelemetry(ctx context.Context, arg InsertTelemetryParams) error {
	_, err := q.db.Exec(ctx, insertTelemetry,
		arg.TripID,
		arg.Time,
		arg.ElectricPowerDemand,
		arg.GnssAltitude,
		arg.GnssCourse,
		arg.GnssLatitude,
		arg.GnssLongitude,
		arg.ItcsBusRoute,
		arg.ItcsNumberOfPassengers,
		arg.ItcsStopName,
		arg.OdometryArticulationAngle,
		arg.OdometrySteeringAngle,
		arg.OdometryVehicleSpeed,
		arg.OdometryWheelSpeedFl,
		arg.OdometryWheelSpeedFr,
		arg.OdometryWheelSpeedMl,
		arg.OdometryWheelSpeedMr,
		arg.OdometryWheelSpeedRl,
		arg.OdometryWheelSpeedRr,
		arg.StatusDoorIsOpen,
		arg.StatusGridIsAvailable,
		arg.StatusHaltBrakeIsActive,
		arg.StatusParkBrakeIsActive,
		arg.TemperatureAmbient,
		arg.TractionBrakePressure,
		arg.TractionTractionForce,
	)
	return err
}

const listAllTrips = `-- name: ListAllTrips :many
SELECT id, name, bus_id, route_id, start_time, end_time, driven_distance_km, energy_consumption_kwh, itcs_passengers_mean, itcs_passengers_min, itcs_passengers_max, grid_available_mean, temperature_mean, temperature_min, temperature_max FROM trips
ORDER BY start_time
`

func (q *Queries) ListAllTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.Query(ctx, listAllTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BusID,
			&i.RouteID,
			&i.StartTime,
			&i.EndTime,
			&i.DrivenDistanceKm,
			&i.EnergyConsumptionKwh,
			&i.ItcsPassengersMean,
			&i.ItcsPassengersMin,
			&i.ItcsPassengersMax,
			&i.GridAvailableMean,
			&i.TemperatureMean,
			&i.TemperatureMin,
			&i.TemperatureMax,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBuses = `-- name: ListBuses :many
SELECT id, bus_number FROM buses
ORDER BY bus_number
`

func (q *Queries) ListBuses(ctx context.Context) ([]Bus, error) {
	rows, err := q.db.Query(ctx, listBuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bus
	for rows.Next() {
		var i Bus
		if err := rows.Scan(&i.ID, &i.BusNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoutes = `-- name: ListRoutes :many
SELECT id, route_code FROM bus_routes
ORDER BY route_code
`

func (q *Queries) ListRoutes(ctx context.Context) ([]BusRoute, error) {
	rows, err := q.db.Query(ctx, listRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusRoute
	for rows.Next() {
		var i BusRoute
		if err := rows.Scan(&i.ID, &i.RouteCode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTelemetryInRange = `-- name: ListTelemetryInRange :many
SELECT id, trip_id, time, electric_power_demand, temperature_ambient, traction_brake_pressure, traction_traction_force, gnss_altitude, gnss_course, gnss_latitude, gnss_longitude, itcs_bus_route, itcs_number_of_passengers, itcs_stop_name, odometry_articulation_angle, odometry_steering_angle, odometry_vehicle_speed, odometry_wheel_speed_fl, odometry_wheel_speed_fr, odometry_wheel_speed_ml, odometry_wheel_speed_mr, odometry_wheel_speed_rl, odometry_wheel_speed_rr, status_door_is_open, status_grid_is_available, status_halt_brake_is_active, status_park_brake_is_active FROM telemetry
WHERE trip_id = $1
  AND time >= $2
  AND time <= $3
ORDER BY time
`

type ListTelemetryInRangeParams struct {
	TripID    int32
	StartTime pgtype.Timestamp
	EndTime   pgtype.Timestamp
}

func (q *Queries) ListTelemetryInRange(ctx context.Context, arg ListTelemetryInRangeParams) ([]Telemetry, error) {
	rows, err := q.db.Query(ctx, listTelemetryInRange, arg.TripID, arg.StartTime, arg.EndTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Telemetry
	for rows.Next() {
		var i Telemetry
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Time,
			&i.ElectricPowerDemand,
			&i.TemperatureAmbient,
			&i.TractionBrakePressure,
			&i.TractionTractionForce,
			&i.GnssAltitude,
			&i.GnssCourse,
			&i.GnssLatitude,
			&i.GnssLongitude,
			&i.ItcsBusRoute,
			&i.ItcsNumberOfPassengers,
			&i.ItcsStopName,
			&i.OdometryArticulationAngle,
			&i.OdometrySteeringAngle,
			&i.OdometryVehicleSpeed,
			&i.OdometryWheelSpeedFl,
			&i.OdometryWheelSpeedFr,
			&i.OdometryWheelSpeedMl,
			&i.OdometryWheelSpeedMr,
			&i.OdometryWheelSpeedRl,
			&i.OdometryWheelSpeedRr,
			&i.StatusDoorIsOpen,
			&i.StatusGridIsAvailable,
			&i.StatusHaltBrakeIsActive,
			&i.StatusParkBrakeIsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE trips
SET
  bus_id = $1,
  route_id = $2,
  start_time = $3,
  end_time = $4,
  driven_distance_km = $5,
  energy_consumption_kWh = $6,
  itcs_passengers_mean = $7,
  itcs_passengers_min = $8,
  itcs_passengers_max = $9,
  grid_available_mean = $10,
  temperature_mean = $11,
  temperature_min = $12,
  temperature_max = $13
WHERE name = $14
`

type UpdateTripParams struct {
	BusID                pgtype.Int4
	RouteID              pgtype.Int4
	StartTime            pgtype.Timestamp
	EndTime              pgtype.Timestamp
	DrivenDistanceKm     pgtype.Numeric
	EnergyConsumptionKWh pgtype.Numeric
	ItcsPassengersMean   pgtype.Numeric
	ItcsPassengersMin    pgtype.Int4
	ItcsPassengersMax    pgtype.Int4
	GridAvailableMean    pgtype.Numeric
	TemperatureMean      pgtype.Numeric
	TemperatureMin       pgtype.Numeric
	TemperatureMax       pgtype.Numeric
	Name                 string
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip,
		arg.BusID,
		arg.RouteID,
		arg.StartTime,
		arg.EndTime,
		arg.DrivenDistanceKm,
		arg.EnergyConsumptionKWh,
		arg.ItcsPassengersMean,
		arg.ItcsPassengersMin,
		arg.ItcsPassengersMax,
		arg.GridAvailableMean,
		arg.TemperatureMean,
		arg.TemperatureMin,
		arg.TemperatureMax,
		arg.Name,
	)
	return err
}
