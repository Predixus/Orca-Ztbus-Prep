// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package main

import (
	"context"
)

// iteratorForInsertTelemetry implements pgx.CopyFromSource.
type iteratorForInsertTelemetry struct {
	rows                 []InsertTelemetryParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertTelemetry) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertTelemetry) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].TripID,
		r.rows[0].Time,
		r.rows[0].ElectricPowerDemand,
		r.rows[0].GnssAltitude,
		r.rows[0].GnssCourse,
		r.rows[0].GnssLatitude,
		r.rows[0].GnssLongitude,
		r.rows[0].BusRouteID,
		r.rows[0].ItcsNumberOfPassengers,
		r.rows[0].ItcsStopName,
		r.rows[0].OdometryArticulationAngle,
		r.rows[0].OdometrySteeringAngle,
		r.rows[0].OdometryVehicleSpeed,
		r.rows[0].OdometryWheelSpeedFl,
		r.rows[0].OdometryWheelSpeedFr,
		r.rows[0].OdometryWheelSpeedMl,
		r.rows[0].OdometryWheelSpeedMr,
		r.rows[0].OdometryWheelSpeedRl,
		r.rows[0].OdometryWheelSpeedRr,
		r.rows[0].StatusDoorIsOpen,
		r.rows[0].StatusGridIsAvailable,
		r.rows[0].StatusHaltBrakeIsActive,
		r.rows[0].StatusParkBrakeIsActive,
		r.rows[0].TemperatureAmbient,
		r.rows[0].TractionBrakePressure,
		r.rows[0].TractionTractionForce,
	}, nil
}

func (r iteratorForInsertTelemetry) Err() error {
	return nil
}

func (q *Queries) InsertTelemetry(ctx context.Context, arg []InsertTelemetryParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"telemetry"}, []string{"trip_id", "time", "electric_power_demand", "gnss_altitude", "gnss_course", "gnss_latitude", "gnss_longitude", "itcs_bus_route_id", "itcs_number_of_passengers", "itcs_stop_name", "odometry_articulation_angle", "odometry_steering_angle", "odometry_vehicle_speed", "odometry_wheel_speed_fl", "odometry_wheel_speed_fr", "odometry_wheel_speed_ml", "odometry_wheel_speed_mr", "odometry_wheel_speed_rl", "odometry_wheel_speed_rr", "status_door_is_open", "status_grid_is_available", "status_halt_brake_is_active", "status_park_brake_is_active", "temperature_ambient", "traction_brake_pressure", "traction_traction_force"}, &iteratorForInsertTelemetry{rows: arg})
}
